Q1) Two number sum

Write a function that takes In a non-empty array of distinct integers and an integer representing a target sum. If any two numbers in the Input array sum up to the target sum, the function should return them in an array, In any order. If no two numbers sum up to the target sum, the function should return an empty array.

Note that the target sum has to be obtained by summing two different integers In the array. you can't add single integer to itself in order to obtain the target sum.
You can assume that there will be at most one pair of numbers summing up to the target sum.

Sample Input
array	[3, 5, -4, 2, 11, 1, -1, 61

TargetSum = 10

Sample Output
[-1, 11] //The numbers could be In reverse order

Java Template:

class Program {
  public static int[] twoNumberSum(int[] array, int targetSum) {
	
        return pair;
    }
}
Q2) Three Number Sum 

Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. The function should find all triplets in the array that sum up to the target sum and return a two-dimensional array of all these triplets. The numbers in each triplet should be ordered in ascending order, and the triplets themselves should be ordered in ascending order with respect to the numbers they hold.
If no three numbers sum up to the target sum, the function should return an empty array.
Sample Input
array = [12, 3, 1, 2, -6, 5, -8, 61]
targetSum = 0
Sample Output
[[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]]

//Starter program

class Program {
  public static List<Integer[]> threeNumberSum(int[] array, int targetSum) {
    // Write your code here.
    return new ArrayList<Integer[]>();
  }
}

Hints
Using three for loops to calculate the sums of all possible triplets in the array would generate an algorithm that runs in O(n^3) time, where n is the length of input array. Can you come up with spmething faster using only two for loops?

Q3) Validate Subsequence
Given two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.
A subsequence of an array is a set of numbers that aren't necessarily adjacent in the array but that are in the same order as they appear in the array. For instance, the numbers [1, 3, 4] form a subsequence of the array [1, 2, 3, 4] , and so do the numbers [2, 4] . Note that a single number in an array and the array itself are both valid subsequences of the array.

Sample Input
array = [5, 1, 22, 25, 6, -1, 8, 10]
sequence = [1, 6, -1, 10]
Sample Output: true

Q4)Sorted Squared Array 

Write a function that takes in a non-empty array of integers that are sorted in ascending order and returns a new array of the same length with the squares of the original integers also sorted in ascending order.
Sample Input
array = [1, 2, 3, 5, 6, 8, 9]
Sample Output [1, 4, 9, 25, 36, 64, 81]

Hint: When the input contains -ve number?
----->
Q5) Reverse an array in an optimum manner.
array = [1, 2, 3, 5, 6, 8, 9]
op_array = [9,8,,6,5,3,2,1]
------>
Q6) Smallest Difference
Write a function that takes in two non-empty arrays of integers, finds the pair of numbers (one from each array) whose absolute difference is closest to zero, and returns an array containing these two numbers, with the number from the first array in the first position.
Note that the absolute difference of two integers is the distance between them on the real number line. For example, the absolute difference of -5 and 5 is 10, and the absolute difference of -5 and -4 is 1.
You can assume that there will only be one pair of numbers with the smallest difference.
Sample Input
arrayone =
arrayTwo
[-1, 5, 10, 20, 28, 3]
[26, 134, 135, 15, 171
Sample Output
(28, 26]

Starter Program: JAVA
class Program {
  public static int[] smallestDifference(int[] arrayOne, int[] arrayTwo) {
    // Write your code here.
    return new int[] {};
  }
}
Python
def smallestDifference(arrayOne, arrayTwo):
    # Write your code here.
    pass



